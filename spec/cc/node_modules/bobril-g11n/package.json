{
  "_args": [
    [
      "bobril-g11n@0.6.1",
      "c:\\Research\\bobril-build\\spec\\cc"
    ]
  ],
  "_from": "bobril-g11n@0.6.1",
  "_id": "bobril-g11n@0.6.1",
  "_inCache": true,
  "_location": "/bobril-g11n",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "email": "Boris.Letocha@gmail.com",
    "name": "bobris"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "name": "bobril-g11n",
    "raw": "bobril-g11n@0.6.1",
    "rawSpec": "0.6.1",
    "scope": null,
    "spec": "0.6.1",
    "type": "version"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_shasum": "49c0b76ccb1ec040f270c43411defd3e36de1b7f",
  "_shrinkwrap": null,
  "_spec": "bobril-g11n@0.6.1",
  "_where": "c:\\Research\\bobril-build\\spec\\cc",
  "author": {
    "name": "Boris Letocha"
  },
  "dependencies": {
    "bobril": "^4.4.0",
    "moment": "^2.10.6",
    "numeral": "^1.5.3"
  },
  "description": "Bobril globalization",
  "devDependencies": {
    "graceful-fs": "^4.1.2",
    "gulp": "^3.9.0",
    "gulp-bump": "*",
    "gulp-util": "^3.0.6",
    "jasmine-core": "^2.3.4",
    "karma": "*",
    "karma-coverage": "*",
    "karma-jasmine": "^0.3.6",
    "karma-phantomjs-launcher": "*",
    "through2": "*",
    "typescript": "latest",
    "webpack": "^1.11.0"
  },
  "directories": {},
  "dist": {
    "shasum": "49c0b76ccb1ec040f270c43411defd3e36de1b7f",
    "tarball": "http://registry.npmjs.org/bobril-g11n/-/bobril-g11n-0.6.1.tgz"
  },
  "gitHead": "d6b558315522bd0707a886e4a8fbb1178fd1c91e",
  "installable": true,
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "Boris.Letocha@gmail.com",
      "name": "bobris"
    }
  ],
  "name": "bobril-g11n",
  "optionalDependencies": {},
  "readme": "# bobril-g11n\n\nBobril Globalization extension\n\ninstall from npm:\n\n\tnpm install bobril-g11n --save\n\nIt is expected to be used together with bobril-build to handle all code and translation generation.\nInternally uses moment.js, numeral.js, CLDR. Inspired by formatjs.io.\nUses very similar message format. Though I was not satisfied with Intl polyfill.\nMessage parse for speed and size written in hand optimized code instead of Pegjs.\n\nUsage in TypeScript:\n\n\timport * as b from 'node_modules/bobril/index';\n\timport * as g from 'node_modules/bobril-g11n/index';\n\t\n\tg.initGlobalization({\n\t\tpathToTranslation(locale:string):string { return 'tr/'+locale+'.js'; }\n\t});\n\t\n\tb.init(()=>{\n\t\treturn { tag:'div', children: g.t('Hello {who}!', { who: 'World' }) };\n\t});\n\nSet different locale - it will asynchronously download translation file.\n\n\tg.setLocale('cs-CZ');\n\nThis is one of examples how to make really human readable messages:\n\n\tg.t('{numPhotos, plural, =0{no photos} =1{one photo} other{# photos}}', { numPhotos: 1 });\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "karma start"
  },
  "typescript": {
    "definition": "index.d.ts",
    "main": "index.ts"
  },
  "version": "0.6.1"
}
