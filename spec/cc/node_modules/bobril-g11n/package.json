{
  "name": "bobril-g11n",
  "version": "0.4.2",
  "description": "Bobril globalization",
  "main": "index.js",
  "typescript": {
    "main": "index.ts",
    "definition": "index.d.ts"
  },
  "dependencies": {
    "bobril": "^4.4.0",
    "moment": "^2.10.6",
    "numeral": "^1.5.3"
  },
  "devDependencies": {
    "graceful-fs": "^4.1.2",
    "gulp": "^3.9.0",
    "gulp-bump": "*",
    "gulp-util": "^3.0.6",
    "jasmine-core": "^2.3.4",
    "karma": "*",
    "karma-coverage": "*",
    "karma-jasmine": "^0.3.6",
    "karma-phantomjs-launcher": "*",
    "through2": "*",
    "typescript": "latest",
    "webpack": "^1.11.0"
  },
  "scripts": {
    "test": "karma start"
  },
  "author": {
    "name": "Boris Letocha"
  },
  "license": "MIT",
  "readme": "# bobril-g11n\n\nBobril Globalization extension\n\ninstall from npm:\n\n\tnpm install bobril-g11n --save\n\nIt is expected to be used together with bobril-build to handle all code and translation generation.\nInternally uses moment.js, numeral.js, CLDR. Inspired by formatjs.io.\nUses very similar message format. Though I was not satisfied with Intl polyfill.\nMessage parse for speed and size written in hand optimized code instead of Pegjs.\n\nUsage in TypeScript:\n\n\timport * as b from 'node_modules/bobril/index';\n\timport * as g from 'node_modules/bobril-g11n/index';\n\t\n\tg.initGlobalization({\n\t\tpathToTranslation(locale:string):string { return 'tr/'+locale+'.js'; }\n\t});\n\t\n\tb.init(()=>{\n\t\treturn { tag:'div', children: g.t('Hello {who}!', { who: 'World' }) };\n\t});\n\nSet different locale - it will asynchronously download translation file.\n\n\tg.setLocale('cs-CZ');\n\nThis is one of examples how to make really human readable messages:\n\n\tg.t('{numPhotos, plural, =0{no photos} =1{one photo} other{# photos}}', { numPhotos: 1 });\n",
  "readmeFilename": "README.md",
  "gitHead": "b03f7d929f9c7abc28f24b042ffeaecf98c52b4f",
  "_id": "bobril-g11n@0.4.2",
  "_shasum": "f500af3df431b582ba0c7626c3684d999c0dbfd1",
  "_from": "bobril-g11n@0.4.2"
}
